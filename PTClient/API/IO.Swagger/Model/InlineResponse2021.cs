/* 
 * TrackServer
 *
 * Server for People Tracking System
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using PTClient.SharedResources;

namespace PTClient.IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2021
    /// </summary>
    [DataContract]
    public partial class InlineResponse2021 :  IEquatable<InlineResponse2021>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2021" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2021() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2021" /> class.
        /// </summary>
        /// <param name="Workers">Workers (required).</param>
        public InlineResponse2021(List<WorkerItem> Workers = default(List<WorkerItem>))
        {
            // to ensure "Workers" is required (not null)
            if (Workers == null)
            {
                throw new InvalidDataException("Workers is a required property for InlineResponse2021 and cannot be null");
            }
            else
            {
                this.Workers = Workers;
            }
        }
        
        /// <summary>
        /// Gets or Sets Workers
        /// </summary>
        [DataMember(Name="workers", EmitDefaultValue=false)]
        public List<WorkerItem> Workers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2021 {\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2021);
        }

        /// <summary>
        /// Returns true if InlineResponse2021 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2021 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2021 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Workers == input.Workers ||
                    this.Workers != null &&
                    this.Workers.SequenceEqual(input.Workers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Workers != null)
                    hashCode = hashCode * 59 + this.Workers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
