/* 
 * TrackServer
 *
 * Server for People Tracking System
 *
 * OpenAPI spec version: 1.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using PTClient.IO.Swagger.Client;
using PTClient.IO.Swagger.Model;
using PTClient.SharedResources;

namespace PTClient.IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all the users position
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        ApiResponse<InlineResponse2021> GetAllWorkersGetWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all the users position
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2021</returns>
        System.Threading.Tasks.Task<InlineResponse2021> GetAllWorkersGetAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all the users position
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> GetAllWorkersGetAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// returns all the users position
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2021</returns>
        InlineResponse2021 GetAllWorkersGet();

        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set Energency Boolean to true
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        void EmergencyUsernamePasswordPost (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set Energency Boolean to true
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmergencyUsernamePasswordPostWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get route to pick up Technicians
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>InlineResponse204</returns>
        InlineResponse204 GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet (string username, string password, double? boatLatitude, double? boatLongitude);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get route to pick up Technicians
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>ApiResponse of InlineResponse204</returns>
        ApiResponse<InlineResponse204> GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetWithHttpInfo (string username, string password, double? boatLatitude, double? boatLongitude);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return User position from server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetUserPositionUsernamePasswordGet (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return User position from server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetUserPositionUsernamePasswordGetWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check if password is a match
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 LoginUsernamePasswordGet (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check if password is a match
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> LoginUsernamePasswordGetWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return Windmill information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 TurbineGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return Windmill information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> TurbineGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update location on specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>InlineResponse203</returns>
        InlineResponse203 UpdateLocationUsernamePasswordPositionPost (string username, string password, string position);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update location on specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>ApiResponse of InlineResponse203</returns>
        ApiResponse<InlineResponse203> UpdateLocationUsernamePasswordPositionPostWithHttpInfo (string username, string password, string position);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set Energency Boolean to true
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmergencyUsernamePasswordPostAsync (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set Energency Boolean to true
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmergencyUsernamePasswordPostAsyncWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get route to pick up Technicians
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>Task of InlineResponse204</returns>
        System.Threading.Tasks.Task<InlineResponse204> GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetAsync (string username, string password, double? boatLatitude, double? boatLongitude);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get route to pick up Technicians
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>Task of ApiResponse (InlineResponse204)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse204>> GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetAsyncWithHttpInfo (string username, string password, double? boatLatitude, double? boatLongitude);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return User position from server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetUserPositionUsernamePasswordGetAsync (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return User position from server.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetUserPositionUsernamePasswordGetAsyncWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check if password is a match
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> LoginUsernamePasswordGetAsync (string username, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Check if password is a match
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> LoginUsernamePasswordGetAsyncWithHttpInfo (string username, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return Windmill information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> TurbineGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// return Windmill information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> TurbineGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update location on specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>Task of InlineResponse203</returns>
        System.Threading.Tasks.Task<InlineResponse203> UpdateLocationUsernamePasswordPositionPostAsync (string username, string password, string position);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update location on specific user.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>Task of ApiResponse (InlineResponse203)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse203>> UpdateLocationUsernamePasswordPositionPostAsyncWithHttpInfo (string username, string password, string position);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Set Energency Boolean to true
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public void EmergencyUsernamePasswordPost (string username, string password)
        {
             EmergencyUsernamePasswordPostWithHttpInfo(username, password);
        }

        /// <summary>
        ///  Set Energency Boolean to true
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EmergencyUsernamePasswordPostWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->EmergencyUsernamePasswordPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->EmergencyUsernamePasswordPost");

            var localVarPath = "/emergency/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmergencyUsernamePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Set Energency Boolean to true
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmergencyUsernamePasswordPostAsync (string username, string password)
        {
             await EmergencyUsernamePasswordPostAsyncWithHttpInfo(username, password);

        }

        /// <summary>
        ///  Set Energency Boolean to true
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EmergencyUsernamePasswordPostAsyncWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->EmergencyUsernamePasswordPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->EmergencyUsernamePasswordPost");

            var localVarPath = "/emergency/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmergencyUsernamePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  get route to pick up Technicians
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>InlineResponse204</returns>
        public InlineResponse204 GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet (string username, string password, double? boatLatitude, double? boatLongitude)
        {
             ApiResponse<InlineResponse204> localVarResponse = GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetWithHttpInfo(username, password, boatLatitude, boatLongitude);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get route to pick up Technicians
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>ApiResponse of InlineResponse204</returns>
        public ApiResponse< InlineResponse204 > GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetWithHttpInfo (string username, string password, double? boatLatitude, double? boatLongitude)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'boatLatitude' is set
            if (boatLatitude == null)
                throw new ApiException(400, "Missing required parameter 'boatLatitude' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'boatLongitude' is set
            if (boatLongitude == null)
                throw new ApiException(400, "Missing required parameter 'boatLongitude' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");

            var localVarPath = "/getRoute/{username}/{password}/{boatLatitude}/{boatLongitude}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter
            if (boatLatitude != null) localVarPathParams.Add("boatLatitude", Configuration.ApiClient.ParameterToString(boatLatitude)); // path parameter
            if (boatLongitude != null) localVarPathParams.Add("boatLongitude", Configuration.ApiClient.ParameterToString(boatLongitude)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse204>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse204) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse204)));
            
        }

        /// <summary>
        ///  get route to pick up Technicians
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>Task of InlineResponse204</returns>
        public async System.Threading.Tasks.Task<InlineResponse204> GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetAsync (string username, string password, double? boatLatitude, double? boatLongitude)
        {
             ApiResponse<InlineResponse204> localVarResponse = await GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetAsyncWithHttpInfo(username, password, boatLatitude, boatLongitude);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get route to pick up Technicians
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="boatLatitude"></param>
        /// <param name="boatLongitude"></param>
        /// <returns>Task of ApiResponse (InlineResponse204)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse204>> GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGetAsyncWithHttpInfo (string username, string password, double? boatLatitude, double? boatLongitude)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'boatLatitude' is set
            if (boatLatitude == null)
                throw new ApiException(400, "Missing required parameter 'boatLatitude' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");
            // verify the required parameter 'boatLongitude' is set
            if (boatLongitude == null)
                throw new ApiException(400, "Missing required parameter 'boatLongitude' when calling DefaultApi->GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet");

            var localVarPath = "/getRoute/{username}/{password}/{boatLatitude}/{boatLongitude}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter
            if (boatLatitude != null) localVarPathParams.Add("boatLatitude", Configuration.ApiClient.ParameterToString(boatLatitude)); // path parameter
            if (boatLongitude != null) localVarPathParams.Add("boatLongitude", Configuration.ApiClient.ParameterToString(boatLongitude)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRouteUsernamePasswordBoatLatitudeBoatLongitudeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse204>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse204) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse204)));
            
        }

        /// <summary>
        ///  return User position from server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetUserPositionUsernamePasswordGet (string username, string password)
        {
             ApiResponse<InlineResponse200> localVarResponse = GetUserPositionUsernamePasswordGetWithHttpInfo(username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  return User position from server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetUserPositionUsernamePasswordGetWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserPositionUsernamePasswordGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->GetUserPositionUsernamePasswordGet");

            var localVarPath = "/getUserPosition/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPositionUsernamePasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  return User position from server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetUserPositionUsernamePasswordGetAsync (string username, string password)
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetUserPositionUsernamePasswordGetAsyncWithHttpInfo(username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  return User position from server.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetUserPositionUsernamePasswordGetAsyncWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->GetUserPositionUsernamePasswordGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->GetUserPositionUsernamePasswordGet");

            var localVarPath = "/getUserPosition/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserPositionUsernamePasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        ///  Check if password is a match
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 LoginUsernamePasswordGet (string username, string password)
        {
             ApiResponse<InlineResponse201> localVarResponse = LoginUsernamePasswordGetWithHttpInfo(username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Check if password is a match
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > LoginUsernamePasswordGetWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginUsernamePasswordGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginUsernamePasswordGet");

            var localVarPath = "/login/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsernamePasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        ///  Check if password is a match
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> LoginUsernamePasswordGetAsync (string username, string password)
        {
             ApiResponse<InlineResponse201> localVarResponse = await LoginUsernamePasswordGetAsyncWithHttpInfo(username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Check if password is a match
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> LoginUsernamePasswordGetAsyncWithHttpInfo (string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->LoginUsernamePasswordGet");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->LoginUsernamePasswordGet");

            var localVarPath = "/login/{username}/{password}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsernamePasswordGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        ///  return Windmill information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 TurbineGet ()
        {
             ApiResponse<InlineResponse202> localVarResponse = TurbineGetWithHttpInfo();
             return localVarResponse.Data;
        }





        /// <summary>
        ///  returns all the users position
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2021</returns>
        public InlineResponse2021 GetAllWorkersGet()
        {
            ApiResponse<InlineResponse2021> localVarResponse = GetAllWorkersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  returns all the users position
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        public ApiResponse<InlineResponse2021> GetAllWorkersGetWithHttpInfo()
        {

            var localVarPath = "/getAllWorkers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWorkersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2021)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        ///  returns all the users position
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2021</returns>
        public async System.Threading.Tasks.Task<InlineResponse2021> GetAllWorkersGetAsync()
        {
            ApiResponse<InlineResponse2021> localVarResponse = await GetAllWorkersGetAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  returns all the users position
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> GetAllWorkersGetAsyncWithHttpInfo()
        {

            var localVarPath = "/getAllWorkers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWorkersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2021)Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        ///  return Windmill information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse< InlineResponse202 > TurbineGetWithHttpInfo ()
        {

            var localVarPath = "/turbine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TurbineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse202) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
            
        }

        /// <summary>
        ///  return Windmill information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> TurbineGetAsync ()
        {
             ApiResponse<InlineResponse202> localVarResponse = await TurbineGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  return Windmill information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> TurbineGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/turbine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TurbineGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse202) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
            
        }

        /// <summary>
        ///  update location on specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>InlineResponse203</returns>
        public InlineResponse203 UpdateLocationUsernamePasswordPositionPost (string username, string password, string position)
        {
             ApiResponse<InlineResponse203> localVarResponse = UpdateLocationUsernamePasswordPositionPostWithHttpInfo(username, password, position);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  update location on specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>ApiResponse of InlineResponse203</returns>
        public ApiResponse< InlineResponse203 > UpdateLocationUsernamePasswordPositionPostWithHttpInfo (string username, string password, string position)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");

            var localVarPath = "/updateLocation/{username}/{password}/{position}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter
            if (position != null) localVarPathParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationUsernamePasswordPositionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse203>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse203) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse203)));
            
        }

        /// <summary>
        ///  update location on specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>Task of InlineResponse203</returns>
        public async System.Threading.Tasks.Task<InlineResponse203> UpdateLocationUsernamePasswordPositionPostAsync (string username, string password, string position)
        {
             ApiResponse<InlineResponse203> localVarResponse = await UpdateLocationUsernamePasswordPositionPostAsyncWithHttpInfo(username, password, position);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  update location on specific user.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="position"></param>
        /// <returns>Task of ApiResponse (InlineResponse203)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse203>> UpdateLocationUsernamePasswordPositionPostAsyncWithHttpInfo (string username, string password, string position)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling DefaultApi->UpdateLocationUsernamePasswordPositionPost");

            var localVarPath = "/updateLocation/{username}/{password}/{position}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (password != null) localVarPathParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // path parameter
            if (position != null) localVarPathParams.Add("position", Configuration.ApiClient.ParameterToString(position)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLocationUsernamePasswordPositionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse203>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse203) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse203)));
            
        }

    }
}
